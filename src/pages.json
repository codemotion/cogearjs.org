{
  "about.md": {
    "title": "About",
    "__content": "\n# About 2\n[Main](/)\n",
    "filename": "about",
    "content": "<h1 id=\"about-2\">About 2</h1>\n<p><a href=\"/\">Main</a></p>\n",
    "path": "about/index.html",
    "layout": "index.pug",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/index.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/about/index.html"
  },
  "docs/deploy.md": {
    "title": "Deploy",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Basics\n\nWhen site is designed in `dev` mode and built in `production` mode, it's time to deploy it to the remote server.\n\nBasically **Cogear.JS** can upload it via **FTP** of **SFTP** protocols.\n\nYou are free to write plugins for deploy to popular services like [Heroku](https://www.heroku.com), [now.sh](https://now.sh), etc.\n\n# Deploying\n\nStart deploying with:\n```bash\n> cogear deploy [preset-name]\n```\n\nIf there is no presets available, you'll be asked a few questions in terminal about your hosting.\n\nAt the end of this quiz you'll be offered to create new preset for later use.\n\nAll the preset are stored in `.deployrc` configuration file.\n\nIf you using `Git` be aware to exclude this file from repo by adding it to `.gitignore`.\n\n```bash\n> echo \".deployrc\" >> .gitignore\n```\n\nAfter deploy is done your site is available online.",
    "filename": "deploy",
    "content": "<h1 id=\"basics\">Basics</h1>\n<p>When site is designed in <code>dev</code> mode and built in <code>production</code> mode, it&#39;s time to deploy it to the remote server.</p>\n<p>Basically <strong>Cogear.JS</strong> can upload it via <strong>FTP</strong> of <strong>SFTP</strong> protocols.</p>\n<p>You are free to write plugins for deploy to popular services like <a href=\"https://www.heroku.com\">Heroku</a>, <a href=\"https://now.sh\">now.sh</a>, etc.</p>\n<h1 id=\"deploying\">Deploying</h1>\n<p>Start deploying with:</p>\n<pre><code class=\"language-bash\">&gt; cogear deploy [preset-name]</code></pre>\n<p>If there is no presets available, you&#39;ll be asked a few questions in terminal about your hosting.</p>\n<p>At the end of this quiz you&#39;ll be offered to create new preset for later use.</p>\n<p>All the preset are stored in <code>.deployrc</code> configuration file.</p>\n<p>If you using <code>Git</code> be aware to exclude this file from repo by adding it to <code>.gitignore</code>.</p>\n<pre><code class=\"language-bash\">&gt; echo &quot;.deployrc&quot; &gt;&gt; .gitignore</code></pre>\n<p>After deploy is done your site is available online.</p>\n",
    "path": "docs/deploy/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/deploy/index.html"
  },
  "docs/index.md": {
    "title": "Getting Started",
    "layout": "docs.pug",
    "js": ["js/docs.js", "js/help.js"],
    "__content": "\n# About\n**Cogear.JS** is a static site generator build with [Node.JS](https://nodejs.org) and based on [Webpack](https://webpack.js.org) (v4.6).\n\nIt's inspired by [Jekyll](https://jekyllrb.com) and others, but built on the top of the latest frontend technologies.\n\nProviding awesome experience of on-the-fly hot reloading to instantly implementing any changes.\n\n<article class=\"message is-info\">\n  <div class=\"message-body\">Use arrow keys <button>&larr;</button> <button>&rarr;</button> to navigate through the docs.</div>\n</article>\n\n## Features\n* It can be usefull for building modern static websites (using [Vue.JS](https://vuejs.org), [React](https://reactjs.org), [Angular](https:/angular.io), [Ember](https://emberjs.org)) or even for rapid prototyping.\n* It's **blazing fast and reliable** being online. Server can handle thousands requests per seconds to serve static files (even on tiny VPS).\n* It doesn't requires **any database** and works on **every hosting** (as it produces *static html and assets files*).\n* It's **100% secure** for hacking because it has no backend after being deployed to the server.\n* It can use **any modern frontend stack** because it uses **Webpack** in system core.\n\nUsing [Github Pages](https://pages.github.com) (or any similar project) you can host generated site **for free**.\n\n### What it can be used for:\n* Rapid site prototyping, \n* Portfolio site,\n* Company site,\n* Product site,\n* Personal blog,\n* Artist or musician site.\n\nAny site that has its administrator generated content.\n\nUsing [Firebase](https://firebase.google.com) or any other _backend_, written in _any lang_ (**PHP**, **Ruby**, **Python**, **Node.JS**) or even with CMS like a **WordPress**, with the help of modern frontend technologies like [Vue.JS](https://vuejs.org) or [React](https://reactjs.org), it can be turned into more dynamic site like **e-commerce**, **products catalog** and so on.\n\n### What it cannot be used for:\n* Forum,\n* Social network,\n* Chat.\n\nOr any other site type with great amount of user-generated content which relies on heavily database usage and dynamically generated pages.\n\n# Installation\nTo install **Cogear.JS** do next:\n```bash\n> npm install cogear -g\n# or\n> yarn global add cogear\n```\nDone. Congratulations! \n\n**Cogear.JS** is now available by CLI-command `cogear`.\n\nNow you're ready to build your first site.\n\n# Usage\nGo to the directory where all your local sites are hosted.\n```bash\n> cd ~/Sites\n```\nCreate a new site via command:\n```bash\n> cogear new awesome-static-site # where \"site\" is your site folder name\n\n# if you have a preset, use it's git repo address as fourth arg\n> cogear new awesome-static-site https://github.com/codemotion/cogear-preset-docs\n```\n\nAfter that go to site dir:\n```bash\ncd ~/Sites/awesome-static-site\n```\nAnd start up **Cogear.JS** in serve mode.\n```bash\ncogear # call this command to run production mode\n# or\ncogear dev # use \"dev\" argument to run webpack-dev-server with hot updates.\n```\n# Options\nAll available options can be seen via `--help` (or it's shortcut `-h`) command.\n```bash\n> cogear -h\n\nCogear.JS â€“ modern static websites generator\n\nUsage: cogear [command]\n\nRuns in production mode by defaults (without command).\n\nOptions:\n\n\t-h, --help          output usage information\n\t-s, --src           set source directory # default: ./src\n\t-o, --output        set output directory # default: ./public\n\t-h, --host          set host for local server # default: localhost\n\t-p, --port          set port for local server # default: 9000\n\t-m, --mode          set mode (alternative to commands) # default: production\n\t-v, --verbose       set webpack verbose # default: false\n\nCommands:\n\n\t[production]           run build and starts static server # optional, default, no hot reload on changes\n\tdev                    run dev server # hot reload for pages, scripts, styles\n\tnew [sitename]         generate new site\n\tdeploy [preset]        deploy site to server\n\tplugin [plugin-name]   generate plugin boilerplate\n\ttheme  [theme-name]    generate theme boilerplate\n\nFor more information visit:\nhttps://cogearjs.org\n```\nNow let's take a look at source dir structure.",
    "filename": "index",
    "content": "<h1 id=\"about\">About</h1>\n<p><strong>Cogear.JS</strong> is a static site generator build with <a href=\"https://nodejs.org\">Node.JS</a> and based on <a href=\"https://webpack.js.org\">Webpack</a> (v4.6).</p>\n<p>It&#39;s inspired by <a href=\"https://jekyllrb.com\">Jekyll</a> and others, but built on the top of the latest frontend technologies.</p>\n<p>Providing awesome experience of on-the-fly hot reloading to instantly implementing any changes.</p>\n<article class=\"message is-info\">\n  <div class=\"message-body\">Use arrow keys <button>&larr;</button> <button>&rarr;</button> to navigate through the docs.</div>\n</article>\n\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>It can be usefull for building modern static websites (using <a href=\"https://vuejs.org\">Vue.JS</a>, <a href=\"https://reactjs.org\">React</a>, <a href=\"https:/angular.io\">Angular</a>, <a href=\"https://emberjs.org\">Ember</a>) or even for rapid prototyping.</li>\n<li>It&#39;s <strong>blazing fast and reliable</strong> being online. Server can handle thousands requests per seconds to serve static files (even on tiny VPS).</li>\n<li>It doesn&#39;t requires <strong>any database</strong> and works on <strong>every hosting</strong> (as it produces <em>static html and assets files</em>).</li>\n<li>It&#39;s <strong>100% secure</strong> for hacking because it has no backend after being deployed to the server.</li>\n<li>It can use <strong>any modern frontend stack</strong> because it uses <strong>Webpack</strong> in system core.</li>\n</ul>\n<p>Using <a href=\"https://pages.github.com\">Github Pages</a> (or any similar project) you can host generated site <strong>for free</strong>.</p>\n<h3 id=\"what-it-can-be-used-for-\">What it can be used for:</h3>\n<ul>\n<li>Rapid site prototyping, </li>\n<li>Portfolio site,</li>\n<li>Company site,</li>\n<li>Product site,</li>\n<li>Personal blog,</li>\n<li>Artist or musician site.</li>\n</ul>\n<p>Any site that has its administrator generated content.</p>\n<p>Using <a href=\"https://firebase.google.com\">Firebase</a> or any other <em>backend</em>, written in <em>any lang</em> (<strong>PHP</strong>, <strong>Ruby</strong>, <strong>Python</strong>, <strong>Node.JS</strong>) or even with CMS like a <strong>WordPress</strong>, with the help of modern frontend technologies like <a href=\"https://vuejs.org\">Vue.JS</a> or <a href=\"https://reactjs.org\">React</a>, it can be turned into more dynamic site like <strong>e-commerce</strong>, <strong>products catalog</strong> and so on.</p>\n<h3 id=\"what-it-cannot-be-used-for-\">What it cannot be used for:</h3>\n<ul>\n<li>Forum,</li>\n<li>Social network,</li>\n<li>Chat.</li>\n</ul>\n<p>Or any other site type with great amount of user-generated content which relies on heavily database usage and dynamically generated pages.</p>\n<h1 id=\"installation\">Installation</h1>\n<p>To install <strong>Cogear.JS</strong> do next:</p>\n<pre><code class=\"language-bash\">&gt; npm install cogear -g\n# or\n&gt; yarn global add cogear</code></pre>\n<p>Done. Congratulations! </p>\n<p><strong>Cogear.JS</strong> is now available by CLI-command <code>cogear</code>.</p>\n<p>Now you&#39;re ready to build your first site.</p>\n<h1 id=\"usage\">Usage</h1>\n<p>Go to the directory where all your local sites are hosted.</p>\n<pre><code class=\"language-bash\">&gt; cd ~/Sites</code></pre>\n<p>Create a new site via command:</p>\n<pre><code class=\"language-bash\">&gt; cogear new awesome-static-site # where &quot;site&quot; is your site folder name\n\n# if you have a preset, use it&#39;s git repo address as fourth arg\n&gt; cogear new awesome-static-site https://github.com/codemotion/cogear-preset-docs</code></pre>\n<p>After that go to site dir:</p>\n<pre><code class=\"language-bash\">cd ~/Sites/awesome-static-site</code></pre>\n<p>And start up <strong>Cogear.JS</strong> in serve mode.</p>\n<pre><code class=\"language-bash\">cogear # call this command to run production mode\n# or\ncogear dev # use &quot;dev&quot; argument to run webpack-dev-server with hot updates.</code></pre>\n<h1 id=\"options\">Options</h1>\n<p>All available options can be seen via <code>--help</code> (or it&#39;s shortcut <code>-h</code>) command.</p>\n<pre><code class=\"language-bash\">&gt; cogear -h\n\nCogear.JS â€“ modern static websites generator\n\nUsage: cogear [command]\n\nRuns in production mode by defaults (without command).\n\nOptions:\n\n    -h, --help          output usage information\n    -s, --src           set source directory # default: ./src\n    -o, --output        set output directory # default: ./public\n    -h, --host          set host for local server # default: localhost\n    -p, --port          set port for local server # default: 9000\n    -m, --mode          set mode (alternative to commands) # default: production\n    -v, --verbose       set webpack verbose # default: false\n\nCommands:\n\n    [production]           run build and starts static server # optional, default, no hot reload on changes\n    dev                    run dev server # hot reload for pages, scripts, styles\n    new [sitename]         generate new site\n    deploy [preset]        deploy site to server\n    plugin [plugin-name]   generate plugin boilerplate\n    theme  [theme-name]    generate theme boilerplate\n\nFor more information visit:\nhttps://cogearjs.org</code></pre>\n<p>Now let&#39;s take a look at source dir structure.</p>\n",
    "path": "docs/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/index.html"
  },
  "docs/license.md": {
    "title": "License",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# For personal usage\n\n**Cogear.JS** is absolutely free for personal usage and is licensed under [MIT](#mit-license).\n\n## MIT License\n<article class=\"message is-success\">\n  <div class=\"message-body\">\n\t\t<p>Copyright 2018 Dmitriy Belyaev (admin@cogear.org)\n\t\t<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\t\t<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\t\t<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  </div>\n</article>\n\n# For commercial usage\n\n**Cogear.JS** is free for commercial usage and is licensed under [GNU AGPLv3 License](#gnu-agplv3-license).\n\n## GNU AGPLv3 License\n<article class=\"message is-info\">\n  <div class=\"message-body\">\n\t\t<p>Copyright &copy; 2018  Dmitriy Belyaev (admin@cogear.org)\n\t\t<p>This program is free software: you can redistribute it and/or modify\n\t\tit under the terms of the GNU Affero General Public License as\n\t\tpublished by the Free Software Foundation, either version 3 of the\n\t\tLicense, or (at your option) any later version.\n\t\t<p>This program is distributed in the hope that it will be useful,\n\t\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\t\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t\tGNU Affero General Public License for more details.\n\t\t<p>You should have received a copy of the GNU Affero General Public License\n\t\talong with this program.  If not, see <<a href=\"https://www.gnu.org/licenses/\">https://www.gnu.org/licenses/</a>>.\n  </div>\n</article>\n\n# For business\n\nIf you are a company that desires to use **Cogear.JS** in your buisness, please contact me at [admin@cogear.org](mailto:admin@cogear.org).\n\nYou can hire me for the workshops or other educational purposes.\n\n# For education\n\nThe same as for the personal usage.\n\n**Cogear.JS** is absolutely free for education usage (universities, schools, etc) and is licensed under [MIT](#mit-license).\n\n",
    "filename": "license",
    "content": "<h1 id=\"for-personal-usage\">For personal usage</h1>\n<p><strong>Cogear.JS</strong> is absolutely free for personal usage and is licensed under <a href=\"#mit-license\">MIT</a>.</p>\n<h2 id=\"mit-license\">MIT License</h2>\n<article class=\"message is-success\">\n  <div class=\"message-body\">\n        <p>Copyright 2018 Dmitriy Belyaev (admin@cogear.org)\n        <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n        <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n        <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  </div>\n</article>\n\n<h1 id=\"for-commercial-usage\">For commercial usage</h1>\n<p><strong>Cogear.JS</strong> is free for commercial usage and is licensed under <a href=\"#gnu-agplv3-license\">GNU AGPLv3 License</a>.</p>\n<h2 id=\"gnu-agplv3-license\">GNU AGPLv3 License</h2>\n<article class=\"message is-info\">\n  <div class=\"message-body\">\n        <p>Copyright &copy; 2018  Dmitriy Belyaev (admin@cogear.org)\n        <p>This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU Affero General Public License as\n        published by the Free Software Foundation, either version 3 of the\n        License, or (at your option) any later version.\n        <p>This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU Affero General Public License for more details.\n        <p>You should have received a copy of the GNU Affero General Public License\n        along with this program.  If not, see <<a href=\"https://www.gnu.org/licenses/\">https://www.gnu.org/licenses/</a>>.\n  </div>\n</article>\n\n<h1 id=\"for-business\">For business</h1>\n<p>If you are a company that desires to use <strong>Cogear.JS</strong> in your buisness, please contact me at <a href=\"mailto:admin@cogear.org\">admin@cogear.org</a>.</p>\n<p>You can hire me for the workshops or other educational purposes.</p>\n<h1 id=\"for-education\">For education</h1>\n<p>The same as for the personal usage.</p>\n<p><strong>Cogear.JS</strong> is absolutely free for education usage (universities, schools, etc) and is licensed under <a href=\"#mit-license\">MIT</a>.</p>\n",
    "path": "docs/license/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/license/index.html"
  },
  "docs/plugins.md": {
    "title": "Plugins",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Basics\n\nPlugins extend **Cogear.JS** functionality. \n\nThey hook into the core and can do a lot:\n* Change webpack config to add loaders and rules\n* Change build process\n* Add more CLI options\n\n# Installation\n\nAll the plugins are represented in `npm` with `cogear-plugin-` prefix.\n\n<article class=\"message is-success\">\n  <div class=\"message-body\"><b>Cogear.JS</b> plugin is a npm package.</div>\n</article>\n\n<article class=\"message is-warning\">\n  <div class=\"message-body\">All the following paths <b>are relative to the plugin folder</b>.</div>\n</article>\n\nFor example if you want to install `compress` plugin which calls appropriate __Webpack__ plugin, you should do the following:\n```bash\n> npm install cogear-plugin-compress\n# or\n> yarn add cogear-plugin-compress\n```\n\nYou don't need to enable it manually becase the systems core will do it for you.\n\nWell done.\n\n# Structure\n\n`Plugin` is a typical `npm` package.\n\nIt can be bundled with `Webpack` also as any other node module.\n\nLet's continue to develop `compress` plugin and define it's file structure.\n\nListing: `cogear-plugin-compress`\n```bash\n|  package.json # npm package info file\n|  compress.js  # main scripts file\n```\n\nListing: `cogear-plugin-compress/package.json`\n```json\n{\n\t\"name\": \"Cogear.JS compression plugin\",\n\t\"description\": \"Add compression options to webpack production config.\",\n\t\"version\": \"1.0\",\n\t\"author\": \"Dmitriy Belyaev<admin@cogear.pro>\",\n\t\"homepage\": \"https://github.com/codemotion/cogear-compression-plugin\",\n\t\"main\": \"./compress.js\"\n}\n```\n\nListing: `cogear-plugin-compress/compress.js`\n```javascript\nconst CompressionPlugin = require(\"compression-webpack-plugin\")\n\nmodule.exports = (cogear) => {\n\tif(cogear.mode == \"production\"){\n\t\tcogear.hooks.webpackConfig.add((config)=>{\n\t\t\tconfig.plugins.push(new CompressionPlugin()))\n\t\t})\n\t}\n}\n```\n\nThat's it.\n\n\n\n# Generator\nTo generate new plugin from scratch just use this command:\n```bash\n> cogear plugin new [plugin-name]\n```\n\nWhere `plugin-name` is a plugin folder and short name.\n\nIt will automatically build basic file structure for you.",
    "filename": "plugins",
    "content": "<h1 id=\"basics\">Basics</h1>\n<p>Plugins extend <strong>Cogear.JS</strong> functionality. </p>\n<p>They hook into the core and can do a lot:</p>\n<ul>\n<li>Change webpack config to add loaders and rules</li>\n<li>Change build process</li>\n<li>Add more CLI options</li>\n</ul>\n<h1 id=\"installation\">Installation</h1>\n<p>All the plugins are represented in <code>npm</code> with <code>cogear-plugin-</code> prefix.</p>\n<article class=\"message is-success\">\n  <div class=\"message-body\"><b>Cogear.JS</b> plugin is a npm package.</div>\n</article>\n\n<article class=\"message is-warning\">\n  <div class=\"message-body\">All the following paths <b>are relative to the plugin folder</b>.</div>\n</article>\n\n<p>For example if you want to install <code>compress</code> plugin which calls appropriate <strong>Webpack</strong> plugin, you should do the following:</p>\n<pre><code class=\"language-bash\">&gt; npm install cogear-plugin-compress\n# or\n&gt; yarn add cogear-plugin-compress</code></pre>\n<p>You don&#39;t need to enable it manually becase the systems core will do it for you.</p>\n<p>Well done.</p>\n<h1 id=\"structure\">Structure</h1>\n<p><code>Plugin</code> is a typical <code>npm</code> package.</p>\n<p>It can be bundled with <code>Webpack</code> also as any other node module.</p>\n<p>Let&#39;s continue to develop <code>compress</code> plugin and define it&#39;s file structure.</p>\n<p>Listing: <code>cogear-plugin-compress</code></p>\n<pre><code class=\"language-bash\">|  package.json # npm package info file\n|  compress.js  # main scripts file</code></pre>\n<p>Listing: <code>cogear-plugin-compress/package.json</code></p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;Cogear.JS compression plugin&quot;,\n    &quot;description&quot;: &quot;Add compression options to webpack production config.&quot;,\n    &quot;version&quot;: &quot;1.0&quot;,\n    &quot;author&quot;: &quot;Dmitriy Belyaev&lt;admin@cogear.pro&gt;&quot;,\n    &quot;homepage&quot;: &quot;https://github.com/codemotion/cogear-compression-plugin&quot;,\n    &quot;main&quot;: &quot;./compress.js&quot;\n}</code></pre>\n<p>Listing: <code>cogear-plugin-compress/compress.js</code></p>\n<pre><code class=\"language-javascript\">const CompressionPlugin = require(&quot;compression-webpack-plugin&quot;)\n\nmodule.exports = (cogear) =&gt; {\n    if(cogear.mode == &quot;production&quot;){\n        cogear.hooks.webpackConfig.add((config)=&gt;{\n            config.plugins.push(new CompressionPlugin()))\n        })\n    }\n}</code></pre>\n<p>That&#39;s it.</p>\n<h1 id=\"generator\">Generator</h1>\n<p>To generate new plugin from scratch just use this command:</p>\n<pre><code class=\"language-bash\">&gt; cogear plugin new [plugin-name]</code></pre>\n<p>Where <code>plugin-name</code> is a plugin folder and short name.</p>\n<p>It will automatically build basic file structure for you.</p>\n",
    "path": "docs/plugins/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/plugins/index.html"
  },
  "docs/support.md": {
    "title": "Support",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Link\nIf you want to support **Cogear.JS**, please leave a link to the official site in your site footer:\n```html\nProudly built with <a href=\"https://cogearjs.org\">Cogear.JS</a>\n```\n# Donate\n\nIf **Cogear.JS** helps you to earn money or even if you just want to give thanks me for the work, please donate:\n* **BTC** 1LSVx5LzYQdHiYxaHREbhfbgVtp8umjGDg\n* **ETH** 0xb8A2E9487004Eaf8D1E1096f1472a388402C3163\n* **ETH Classic** 0x80b819D686C820A551BA2C57e45d94152e529ca4\n* **Litecoin** LUjxkKzhgs1zCNztPKYE6kUmJYvyCjeD5L\n* **ZCash** t1URLDxWH8XN3V5TxSGLRySTqdbMGb2QqCA\n* **Yandex.Money** 41001122128423\n* **VISA/Mastercard** 5106 2180 3042 8486\n",
    "filename": "support",
    "content": "<h1 id=\"link\">Link</h1>\n<p>If you want to support <strong>Cogear.JS</strong>, please leave a link to the official site in your site footer:</p>\n<pre><code class=\"language-html\">Proudly built with &lt;a href=&quot;https://cogearjs.org&quot;&gt;Cogear.JS&lt;/a&gt;</code></pre>\n<h1 id=\"donate\">Donate</h1>\n<p>If <strong>Cogear.JS</strong> helps you to earn money or even if you just want to give thanks me for the work, please donate:</p>\n<ul>\n<li><strong>BTC</strong> 1LSVx5LzYQdHiYxaHREbhfbgVtp8umjGDg</li>\n<li><strong>ETH</strong> 0xb8A2E9487004Eaf8D1E1096f1472a388402C3163</li>\n<li><strong>ETH Classic</strong> 0x80b819D686C820A551BA2C57e45d94152e529ca4</li>\n<li><strong>Litecoin</strong> LUjxkKzhgs1zCNztPKYE6kUmJYvyCjeD5L</li>\n<li><strong>ZCash</strong> t1URLDxWH8XN3V5TxSGLRySTqdbMGb2QqCA</li>\n<li><strong>Yandex.Money</strong> 41001122128423</li>\n<li><strong>VISA/Mastercard</strong> 5106 2180 3042 8486</li>\n</ul>\n",
    "path": "docs/support/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/support/index.html"
  },
  "docs/themes.md": {
    "title": "Themes",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Basics\nThemes provide layouts and can be used to load additional scripts, styles, images and other type of assets.\n\n# Installation\n\nAll themes are represented as `npm` packages with prefix `cogear-theme-`.\n\n<article class=\"message is-success\">\n  <div class=\"message-body\"><b>Cogear.JS</b> theme is a npm package.</div>\n</article>\n\nFor example, if you decided to build your own theme named `bulma` its package must be named as `cogear-theme-bulma`.\n\n<article class=\"message is-warning\">\n  <div class=\"message-body\">All the following paths <b>are relative to the theme folder</b>.</div>\n</article>\n\nInstall themes with ease:\n```bash\n> npm install cogear-theme-bulma\n# or \n> yarn add cogear-theme-bulma\n```\n\nThen edit `./config.json` file to match installed theme:\n```json\n{\n  \"site\": {\n    \"title\": \"Cogear.JS â€“ modern site generator (Node.JS/Webpack)\"\n  },\n  \"theme\": \"bulma\",\n  \"plugins\": [\n    \n  ]\n}\n```\n\n# Structure\n\nBasic theme file structure is:\n```bash\n./bulma\n|  layouts    # Layouts folder\n|  \\index.pug # Index layout | required\n|  # Basic node module package.json file with theme info\t\n|  package.json \n|  README.md # Do not forget to tell other users about your theme\n```\n\nListing: `./layouts/index.pug`\n```pug\ndoctype html\nhead\n\ttitle= title\n\tblock head\nbody\n\tblock content\n\t\t!= content\n\tblock footer\n```\n\nListing: `./package.json`\n```json\n{\n\t\"name\": \"Default Cogear.JS theme\",\n\t\"version\": \"1.0\",\n\t\"author\": \"Dmitriy Belyaev <admin@cogear.pro>\",\n\t\"homepage\": \"https://cogear.pro\"\n}\n```\n\nEverything else you need â€“ you may do what you want: \n* organize dirs,\n* make tests,\n* write scripts,\n* create styles,\n* provide images,\n* install fonts,\n* import node modules.\n\nYou are free with your inspiration.\n\nFor example, you may create `theme.js` entry point (with script, styles, images and fonts imports) and import it in `./src/app.js`.\n\nListing: `./theme.js` (theme root)\n```javascript\nimport('https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css')\n```\n\nAnd then just import it in your main `./src/app.js` script (relative to the project `root`):\n\nListing: `./src/app.js` (project root)\n```javascript\nimport('@/theme.js')\n```\nWell done! All the scripts, styles, fonts, images (and so on) will be imported automatically.\n\n# Generator\nTo generate new theme from scratch just use this command:\n```bash\n> cogear theme new [theme-name]\n```\n\nWhere `theme-name` is a theme folder and short name.\n\nIt will automatically build basic file structure for you.",
    "filename": "themes",
    "content": "<h1 id=\"basics\">Basics</h1>\n<p>Themes provide layouts and can be used to load additional scripts, styles, images and other type of assets.</p>\n<h1 id=\"installation\">Installation</h1>\n<p>All themes are represented as <code>npm</code> packages with prefix <code>cogear-theme-</code>.</p>\n<article class=\"message is-success\">\n  <div class=\"message-body\"><b>Cogear.JS</b> theme is a npm package.</div>\n</article>\n\n<p>For example, if you decided to build your own theme named <code>bulma</code> its package must be named as <code>cogear-theme-bulma</code>.</p>\n<article class=\"message is-warning\">\n  <div class=\"message-body\">All the following paths <b>are relative to the theme folder</b>.</div>\n</article>\n\n<p>Install themes with ease:</p>\n<pre><code class=\"language-bash\">&gt; npm install cogear-theme-bulma\n# or \n&gt; yarn add cogear-theme-bulma</code></pre>\n<p>Then edit <code>./config.json</code> file to match installed theme:</p>\n<pre><code class=\"language-json\">{\n  &quot;site&quot;: {\n    &quot;title&quot;: &quot;Cogear.JS â€“ modern site generator (Node.JS/Webpack)&quot;\n  },\n  &quot;theme&quot;: &quot;bulma&quot;,\n  &quot;plugins&quot;: [\n\n  ]\n}</code></pre>\n<h1 id=\"structure\">Structure</h1>\n<p>Basic theme file structure is:</p>\n<pre><code class=\"language-bash\">./bulma\n|  layouts    # Layouts folder\n|  \\index.pug # Index layout | required\n|  # Basic node module package.json file with theme info    \n|  package.json \n|  README.md # Do not forget to tell other users about your theme</code></pre>\n<p>Listing: <code>./layouts/index.pug</code></p>\n<pre><code class=\"language-pug\">doctype html\nhead\n    title= title\n    block head\nbody\n    block content\n        != content\n    block footer</code></pre>\n<p>Listing: <code>./package.json</code></p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;Default Cogear.JS theme&quot;,\n    &quot;version&quot;: &quot;1.0&quot;,\n    &quot;author&quot;: &quot;Dmitriy Belyaev &lt;admin@cogear.pro&gt;&quot;,\n    &quot;homepage&quot;: &quot;https://cogear.pro&quot;\n}</code></pre>\n<p>Everything else you need â€“ you may do what you want: </p>\n<ul>\n<li>organize dirs,</li>\n<li>make tests,</li>\n<li>write scripts,</li>\n<li>create styles,</li>\n<li>provide images,</li>\n<li>install fonts,</li>\n<li>import node modules.</li>\n</ul>\n<p>You are free with your inspiration.</p>\n<p>For example, you may create <code>theme.js</code> entry point (with script, styles, images and fonts imports) and import it in <code>./src/app.js</code>.</p>\n<p>Listing: <code>./theme.js</code> (theme root)</p>\n<pre><code class=\"language-javascript\">import(&#39;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css&#39;)</code></pre>\n<p>And then just import it in your main <code>./src/app.js</code> script (relative to the project <code>root</code>):</p>\n<p>Listing: <code>./src/app.js</code> (project root)</p>\n<pre><code class=\"language-javascript\">import(&#39;@/theme.js&#39;)</code></pre>\n<p>Well done! All the scripts, styles, fonts, images (and so on) will be imported automatically.</p>\n<h1 id=\"generator\">Generator</h1>\n<p>To generate new theme from scratch just use this command:</p>\n<pre><code class=\"language-bash\">&gt; cogear theme new [theme-name]</code></pre>\n<p>Where <code>theme-name</code> is a theme folder and short name.</p>\n<p>It will automatically build basic file structure for you.</p>\n",
    "path": "docs/themes/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/themes/index.html"
  },
  "docs/webpack.md": {
    "title": "Webpack",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Basics\n\n[Webpack](https://webpack.js.org) is the most advanced build tool for compiling assets. \n\nIn fact it's a new worldwide standart for building websites.\n\nMoreover it providers realtime **hot reloading** to implement all the changes throughout all the scripts, styles, images and fonts assets immedeately. \n\n# Configs\n\nConfig files both for `production` and `development` modes are located in the project root:\n```bash\n./\n|  webpack.prod.js   # <= Production config\n|  webpack.dev.js    # <= Development config\n|  webpack.common.js # <= Common config shared between production and development\n```\n\nLet's take a closer look at them.\n\n## `webpack.common.js`\n__TODO: Github file__\n\n## `webpack.prod.js`\n__TODO: Github file__\n\n## `webpack.dev.js`\n__TODO: Github file__\n\nAll in all it's usual [Webpack](https://webpack.js.org) config. You can edit it in your project to customize [Webpack](https://webpack.js.org) behavior. \n\nIf you have some questions, please, take a closer look [to the concepts](https://webpack.js.org/concepts/) in [Webpack](https://webpack.js.org) documentation.\n\n# Hooking configs\n\nAs you've noticed config files returns a function which accepts system instasnce as `cogear` argument.\n\nThis means that configs are called from inside the system build process.\n\nYou may use `webpackConfig` hook in your [plugin](/docs/plugins) to change the config (detecting **Cogear.JS** mode with `cogear.options.mode` variable).",
    "filename": "webpack",
    "content": "<h1 id=\"basics\">Basics</h1>\n<p><a href=\"https://webpack.js.org\">Webpack</a> is the most advanced build tool for compiling assets. </p>\n<p>In fact it&#39;s a new worldwide standart for building websites.</p>\n<p>Moreover it providers realtime <strong>hot reloading</strong> to implement all the changes throughout all the scripts, styles, images and fonts assets immedeately. </p>\n<h1 id=\"configs\">Configs</h1>\n<p>Config files both for <code>production</code> and <code>development</code> modes are located in the project root:</p>\n<pre><code class=\"language-bash\">./\n|  webpack.prod.js   # &lt;= Production config\n|  webpack.dev.js    # &lt;= Development config\n|  webpack.common.js # &lt;= Common config shared between production and development</code></pre>\n<p>Let&#39;s take a closer look at them.</p>\n<h2 id=\"webpack-common-js\"><code>webpack.common.js</code></h2>\n<p><strong>TODO: Github file</strong></p>\n<h2 id=\"webpack-prod-js\"><code>webpack.prod.js</code></h2>\n<p><strong>TODO: Github file</strong></p>\n<h2 id=\"webpack-dev-js\"><code>webpack.dev.js</code></h2>\n<p><strong>TODO: Github file</strong></p>\n<p>All in all it&#39;s usual <a href=\"https://webpack.js.org\">Webpack</a> config. You can edit it in your project to customize <a href=\"https://webpack.js.org\">Webpack</a> behavior. </p>\n<p>If you have some questions, please, take a closer look <a href=\"https://webpack.js.org/concepts/\">to the concepts</a> in <a href=\"https://webpack.js.org\">Webpack</a> documentation.</p>\n<h1 id=\"hooking-configs\">Hooking configs</h1>\n<p>As you&#39;ve noticed config files returns a function which accepts system instasnce as <code>cogear</code> argument.</p>\n<p>This means that configs are called from inside the system build process.</p>\n<p>You may use <code>webpackConfig</code> hook in your <a href=\"/docs/plugins\">plugin</a> to change the config (detecting <strong>Cogear.JS</strong> mode with <code>cogear.options.mode</code> variable).</p>\n",
    "path": "docs/webpack/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/webpack/index.html"
  },
  "docs/workflow.md": {
    "title": "Workflow",
    "layout": "docs.pug",
    "js": ["js/docs.js"],
    "__content": "\n# Basics\n**Cogear.JS** is a static site generator. It means that it compiles `source` folder data to static html and assets files to the `output` folder.\n\nPages in `source` folder can be provided in different formats: `.md`,`.pug`,`.html`,`.ejs`,`.hbs`.\n\nCompiled pages can have `layouts` which are provided by site `theme`.\n\nMain script `app.js` is bundled with every page, but additional per page scripts can be defined in page meta (with [`yaml-front-matter`](https://github.com/spatie/yaml-front-matter)).\n\nAll external (remote) and internal(local or from `node_modules`) modules should be imported from scripts.\n\n# Build\nTo build static site **Cogear.JS** performs next steps:\n1. Reads site config from `./config.json`.\n2. Searches `source` directory `pages` subfolder for pages. (default: `./src/pages`)\n3. Reads pages. \nAvailable page formats: `.md`,`.pug`,`.html`,`.ejs`,`.hbs`.\nParse metadata with [`yaml-front-matter`](https://github.com/spatie/yaml-front-matter).\n4. Compiles static `html` files from pages content through the `theme` layout into `build` folder.\n5. Fires up `webpack` server (in `production` mode) or `webpack-dev-server` (in `dev` mode, with *hot-reload*).\n6. Compiles assets and injects them into previousely built static html files.\nAssets are: `js`,`coffee`,`css`,`sass`,`scss`,`stylus`,`less`,`Vue`,`jsx`,`fonts`,`images`.\n7. Done.\n\n\n\n## Config\nConfig is a simple JSON-file located at `./config.json`.\n```json\n{\n  \"site\": {\n    \"title\": \"Cogear.JS â€“ modern site generator (Node.JS/Webpack)\"\n  },\n  \"theme\": \"default\"\n}\n```\nIf `page` title is not defined then site config title will be used.\n\nPay attention to the `theme` property as it defines basic layout and can be also used to load scripts, styles and other assets.\n\n# Modes\nWhen **Cogear.JS** is called from command line it starts in `production` mode.\n\n## Production\n```bash\n> cogear # run production mode by default\n```\nThis mode performs:\n1. Pages build.\n2. Assets compilation and injection to pages with [Webpack](https://webpack.js.org).\n3. Starting local server to check out the results.\n\nIt should be called before [deploy](/docs/deploy) process in order output files to be built in physical file system.\n\n## Development\n```bash\n> cogear dev # run dev mode with param\n```\nThis mode peforms:\n1. Pages build and start watcher to listen for pages changes.\n2. Start [`webpack-dev-server`](https://github.com/webpack/webpack-dev-server) which will instantly update in-browser pages, scripts and styles on the fly with `hot-reload` module.\n3. Local server is server by [`webpack-dev-server`](https://github.com/webpack/webpack-dev-server).\n\nIt handles all files in memory, so there is no output in physical file system in this mode. \n\n\n# Source\nIt's the place where all magic happens.\n\nBasic structure:\n```bash\n# Listing of ./src dir\n./src\n|  layouts/     # optional\n|    index.pug  # optional\n|  pages/       # required\n|    index.md   # site index page\n|  app.js       # required\n```\n\nThe required files are: `app.js` and `pages/index.md` (`Markdown` or [any other format](#pages)).\n\n## Main script `app.js`\n\nIt's the `entry` point ([`Webpack` term](https://webpack.js.org/concepts/entry-points/)) which has to be injected in all the pages.\n\nAll you internal and external scripts may be imported there.\n\nExample:\n```javascript\n// Look at webpack-specific comments\nimport(/* webpackPrefetch: true*/'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css')\n// Either remote or local scripts, styles and other resources (like fonts) can be loaded\nimport(/* webpackChunkName: \"styles\", webpackPrefetch: true, webpackPreload: true*/'./css/app.styl')\n// You can even import your theme entry script if it's necessary\nimport('@/theme.js')\n// `@` is an alias for current theme folder\n// `#` is an alias for project root folder\n```\n\n\n\n# Pages\nPages are the main structure units of **Cogear.JS** generator.\n\nThey must be located at `pages` folder of the `source` directory (default: `./src/pages`).\n\n## Formats (parsers)\n\nThey can be in various formats: `.md`,`.pug`,`.html`,`.ejs`,`.hbs`.\n\nDifferent pages can have their own file extension at the same time (but avoid the same filenames).\n```bash\n./src/pages\n|  index.md            # Compiles with Markdown\n|  about.html          # Compiles with EJS (can use variables)\n|  contact-us.pug      # Compiles with PUG\n|  portfolio.ejs       # Compiles with EJS\n|  testimonals.hbs     # Compiles with Handlebars\n```\n\n## Metadata with [`yaml-front-matter`](https://github.com/spatie/yaml-front-matter)\nEach page can store meta-data with the help of [`yaml-front-matter`](https://github.com/spatie/yaml-front-matter) script.\n\nExample:\n`./src/pages/about.md`\n```bash\n---\ntitle: About   # Used for html head title param\nuri: about-us  # Used for generated file path\nlayout: about  # User for layout\n---\n# About us\n\nYou may contact us anytime using this phone number:\n\n## 8-800-000-00-00\n```\n<article class=\"message is-warning\">\n  <div class=\"message-body\">\n    No matter what page format do you use, <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a> meta-data <b>should always be formatted in that same way</b>.\n   </div>\n</article>\n\nExample:\n`./src/pages/about.html`\n```bash\n---\ntitle: About   # Used for html head title tag\ndescription: Awesome contacts page # Used for html head meta description tag\nkeywords: cogear.js, node, webpack # Used for html head meta keywords tag\nuri: about-us  # Used for generated file path\nlayout: about  # User for layout\n---\n<h1><%= title%></h1>\n\nYou may contact us anytime using this phone number:\n\n<h2>8-800-000-00-00</h2>\n```\n<article class=\"message is-info\">\n  <div class=\"message-body\">All the metadata is provided as <b>JSON-object</b> to the page template and to the layout template.\n  <br>Pages content is provided via <code>content</code> variable provided for layouts.</div>\n</article>\n\nExample: `./themes/default/layouts/index.pug`\n```pug\ndoctype html\nhead\n  title= title\n  meta(name=\"description\" content=description)\n  meta(name=\"keywords\" content=keywords)\n\tblock head\nbody\n\tblock content\n\t\t!= content // is needed to be unescaped\n\tblock footer\n```\nAs page contents is a simple html **don't forget to unescape it** in page layout.\n\n## Routing\nIf `uri` param is not provided, **Cogear.JS** builds page route corresponding to folders structure.\n\nExample:\n\nSource file | Generated file | Real usage\n:----------:|:-----------:|:------------:\n/index.md    | /index.html  | /\n/contact-us.hbs | /contact-us/index.html | /contact-us/\n/about/index.pug | /about/index.html | /about/\n/portfolio/beautiful-site.ejs | /portfolio/beautiful-site/index.html |  /portfolio/beautiful-site\n\nIn custom case when `uri` is provided system will follow it, adding `/index.html` at the end if is needed:\n\n`uri` param | Generated file | Real usage\n:----------:|:--------------:|:-----------:\nindex.html | /index.html | /\nabout | /about/index.html | /about\nportfolio/awesome-site | /portfolio/awesome-site/index.html | /portfolio/awesome-site\n\nIn most cases you won't needed `uri` param at all.\n\n## Per page scripts\nAll the pages share `app.js` entry script. But what if we need some other script to be on some page?\n\nUser `js` array variable to add scripts relative to site `source` directory (default: `./src`).\n\n<article class=\"message is-warning\">\n  <div class=\"message-body\"><b>Attention!</b> Usage of <code>js</code> meta-variable will rewrite it's default value (<code>app.js</code>). Don't forget to include <code>app.js</code> if you need it.</div>\n</article>\n\nExample: `./pages/about.md`\n```bash\n---\ntitle: About\njs: [\"app.js\",\"js/about.js\"]\n---\n# About page\n```\n\nExample: `./pages/js/about.js`\n```javascript\nconsole.log(\"This message is shown only in \\\"About\\\" page console.\")\n// Or you can import even remote scripts\nimport('https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.js')\nimport('https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css')\n// Or node_modules\nimport Vue from 'vue'\n// Or local scripts\nimport Lib from './lib.js'\nimport './css/about.sass'\n```\n\n## All pages in JSON-file\n\nFor usefull cases after the build has been done (and before `Webpack` starts) all the pages are store in `./src/pages.json` file.\n\nIt can be import in any entry point and used, for example, in menu building or list output.\n\nExample: `./src/app.js`\n```javascript\nimport pages from \"./pages.json\"\n\npages.forEach((page)=>{\n  // Do something\n})\n```\n\n# Layouts\nAfter the `page` content is parsed with proper formatter, system starts up to look for the layout.\n\n`Layout` can be a file of the same [formats](#formats-parsers-).\n\nIf `layout` is not defined in `page` metadata, it will be set to `index` by default.\n\nExample:\n```bash\n---\ntitle: Index\n# no layout is provded here, so it'll be set to `index` by default\n---\n# Page contents\n```\n\nIf `layout` is provided but has no extension, `.pug` will be used by default.\n\nExample:\n```bash\n---\ntitle: Index\nlayout: index # .pug extension will be added by default\n---\n# Page contents\n```\n\nIf `layout` is set to `false`, the `page` output will be written directly to the `output file` (__without layout__).\n\nExample:\n```bash\n---\ntitle: Index\nlayout: false # layout is set to `false`, then page will be written directly to the output file\n---\n# Page contents\n```\n\n## Layouts resolver\nLayouts can be located at current theme `layouts` folder (default: `./themes/default/layouts`) or at current site `layouts` folder (example: `./src/layouts`).\n```bash\nSearch loop:\n1. Site layouts   # (ex.:`./src/layouts`)\n2. Theme layouts  # (ex.:`./themes/default/layouts`)\n```\nThis way you can override theme layout with the current site layout.\n\n## Page content in layout\n\nAs it was said earlier, page metadata and it's content (as `content` field of data object) are provided to layout as variables.\n\nLet's look and `html5` template (which also served with `EJS` compiler to make _variables_ be used):\n```\n<!doctype html>\n<head>\n  <title><%= title%></title>\n</head>\n<body>\n  <%- output%>\n</body>\n```\nPay attention that `content` variable must be **unescaped** as it contains raw html data, parsed from page contents.",
    "filename": "workflow",
    "content": "<h1 id=\"basics\">Basics</h1>\n<p><strong>Cogear.JS</strong> is a static site generator. It means that it compiles <code>source</code> folder data to static html and assets files to the <code>output</code> folder.</p>\n<p>Pages in <code>source</code> folder can be provided in different formats: <code>.md</code>,<code>.pug</code>,<code>.html</code>,<code>.ejs</code>,<code>.hbs</code>.</p>\n<p>Compiled pages can have <code>layouts</code> which are provided by site <code>theme</code>.</p>\n<p>Main script <code>app.js</code> is bundled with every page, but additional per page scripts can be defined in page meta (with <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a>).</p>\n<p>All external (remote) and internal(local or from <code>node_modules</code>) modules should be imported from scripts.</p>\n<h1 id=\"build\">Build</h1>\n<p>To build static site <strong>Cogear.JS</strong> performs next steps:</p>\n<ol>\n<li>Reads site config from <code>./config.json</code>.</li>\n<li>Searches <code>source</code> directory <code>pages</code> subfolder for pages. (default: <code>./src/pages</code>)</li>\n<li>Reads pages. \nAvailable page formats: <code>.md</code>,<code>.pug</code>,<code>.html</code>,<code>.ejs</code>,<code>.hbs</code>.\nParse metadata with <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a>.</li>\n<li>Compiles static <code>html</code> files from pages content through the <code>theme</code> layout into <code>build</code> folder.</li>\n<li>Fires up <code>webpack</code> server (in <code>production</code> mode) or <code>webpack-dev-server</code> (in <code>dev</code> mode, with <em>hot-reload</em>).</li>\n<li>Compiles assets and injects them into previousely built static html files.\nAssets are: <code>js</code>,<code>coffee</code>,<code>css</code>,<code>sass</code>,<code>scss</code>,<code>stylus</code>,<code>less</code>,<code>Vue</code>,<code>jsx</code>,<code>fonts</code>,<code>images</code>.</li>\n<li>Done.</li>\n</ol>\n<h2 id=\"config\">Config</h2>\n<p>Config is a simple JSON-file located at <code>./config.json</code>.</p>\n<pre><code class=\"language-json\">{\n  &quot;site&quot;: {\n    &quot;title&quot;: &quot;Cogear.JS â€“ modern site generator (Node.JS/Webpack)&quot;\n  },\n  &quot;theme&quot;: &quot;default&quot;\n}</code></pre>\n<p>If <code>page</code> title is not defined then site config title will be used.</p>\n<p>Pay attention to the <code>theme</code> property as it defines basic layout and can be also used to load scripts, styles and other assets.</p>\n<h1 id=\"modes\">Modes</h1>\n<p>When <strong>Cogear.JS</strong> is called from command line it starts in <code>production</code> mode.</p>\n<h2 id=\"production\">Production</h2>\n<pre><code class=\"language-bash\">&gt; cogear # run production mode by default</code></pre>\n<p>This mode performs:</p>\n<ol>\n<li>Pages build.</li>\n<li>Assets compilation and injection to pages with <a href=\"https://webpack.js.org\">Webpack</a>.</li>\n<li>Starting local server to check out the results.</li>\n</ol>\n<p>It should be called before <a href=\"/docs/deploy\">deploy</a> process in order output files to be built in physical file system.</p>\n<h2 id=\"development\">Development</h2>\n<pre><code class=\"language-bash\">&gt; cogear dev # run dev mode with param</code></pre>\n<p>This mode peforms:</p>\n<ol>\n<li>Pages build and start watcher to listen for pages changes.</li>\n<li>Start <a href=\"https://github.com/webpack/webpack-dev-server\"><code>webpack-dev-server</code></a> which will instantly update in-browser pages, scripts and styles on the fly with <code>hot-reload</code> module.</li>\n<li>Local server is server by <a href=\"https://github.com/webpack/webpack-dev-server\"><code>webpack-dev-server</code></a>.</li>\n</ol>\n<p>It handles all files in memory, so there is no output in physical file system in this mode. </p>\n<h1 id=\"source\">Source</h1>\n<p>It&#39;s the place where all magic happens.</p>\n<p>Basic structure:</p>\n<pre><code class=\"language-bash\"># Listing of ./src dir\n./src\n|  layouts/     # optional\n|    index.pug  # optional\n|  pages/       # required\n|    index.md   # site index page\n|  app.js       # required</code></pre>\n<p>The required files are: <code>app.js</code> and <code>pages/index.md</code> (<code>Markdown</code> or <a href=\"#pages\">any other format</a>).</p>\n<h2 id=\"main-script-app-js\">Main script <code>app.js</code></h2>\n<p>It&#39;s the <code>entry</code> point (<a href=\"https://webpack.js.org/concepts/entry-points/\"><code>Webpack</code> term</a>) which has to be injected in all the pages.</p>\n<p>All you internal and external scripts may be imported there.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\">// Look at webpack-specific comments\nimport(/* webpackPrefetch: true*/&#39;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css&#39;)\n// Either remote or local scripts, styles and other resources (like fonts) can be loaded\nimport(/* webpackChunkName: &quot;styles&quot;, webpackPrefetch: true, webpackPreload: true*/&#39;./css/app.styl&#39;)\n// You can even import your theme entry script if it&#39;s necessary\nimport(&#39;@/theme.js&#39;)\n// `@` is an alias for current theme folder\n// `#` is an alias for project root folder</code></pre>\n<h1 id=\"pages\">Pages</h1>\n<p>Pages are the main structure units of <strong>Cogear.JS</strong> generator.</p>\n<p>They must be located at <code>pages</code> folder of the <code>source</code> directory (default: <code>./src/pages</code>).</p>\n<h2 id=\"formats-parsers-\">Formats (parsers)</h2>\n<p>They can be in various formats: <code>.md</code>,<code>.pug</code>,<code>.html</code>,<code>.ejs</code>,<code>.hbs</code>.</p>\n<p>Different pages can have their own file extension at the same time (but avoid the same filenames).</p>\n<pre><code class=\"language-bash\">./src/pages\n|  index.md            # Compiles with Markdown\n|  about.html          # Compiles with EJS (can use variables)\n|  contact-us.pug      # Compiles with PUG\n|  portfolio.ejs       # Compiles with EJS\n|  testimonals.hbs     # Compiles with Handlebars</code></pre>\n<h2 id=\"metadata-with-yaml-front-matter\">Metadata with <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a></h2>\n<p>Each page can store meta-data with the help of <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a> script.</p>\n<p>Example:\n<code>./src/pages/about.md</code></p>\n<pre><code class=\"language-bash\">---\ntitle: About   # Used for html head title param\nuri: about-us  # Used for generated file path\nlayout: about  # User for layout\n---\n# About us\n\nYou may contact us anytime using this phone number:\n\n## 8-800-000-00-00</code></pre>\n<article class=\"message is-warning\">\n  <div class=\"message-body\">\n    No matter what page format do you use, <a href=\"https://github.com/spatie/yaml-front-matter\"><code>yaml-front-matter</code></a> meta-data <b>should always be formatted in that same way</b>.\n   </div>\n</article>\n\n<p>Example:\n<code>./src/pages/about.html</code></p>\n<pre><code class=\"language-bash\">---\ntitle: About   # Used for html head title tag\ndescription: Awesome contacts page # Used for html head meta description tag\nkeywords: cogear.js, node, webpack # Used for html head meta keywords tag\nuri: about-us  # Used for generated file path\nlayout: about  # User for layout\n---\n&lt;h1&gt;&lt;%= title%&gt;&lt;/h1&gt;\n\nYou may contact us anytime using this phone number:\n\n&lt;h2&gt;8-800-000-00-00&lt;/h2&gt;</code></pre>\n<article class=\"message is-info\">\n  <div class=\"message-body\">All the metadata is provided as <b>JSON-object</b> to the page template and to the layout template.\n  <br>Pages content is provided via <code>content</code> variable provided for layouts.</div>\n</article>\n\n<p>Example: <code>./themes/default/layouts/index.pug</code></p>\n<pre><code class=\"language-pug\">doctype html\nhead\n  title= title\n  meta(name=&quot;description&quot; content=description)\n  meta(name=&quot;keywords&quot; content=keywords)\n    block head\nbody\n    block content\n        != content // is needed to be unescaped\n    block footer</code></pre>\n<p>As page contents is a simple html <strong>don&#39;t forget to unescape it</strong> in page layout.</p>\n<h2 id=\"routing\">Routing</h2>\n<p>If <code>uri</code> param is not provided, <strong>Cogear.JS</strong> builds page route corresponding to folders structure.</p>\n<p>Example:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Source file</th>\n<th align=\"center\">Generated file</th>\n<th align=\"center\">Real usage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">/index.md</td>\n<td align=\"center\">/index.html</td>\n<td align=\"center\">/</td>\n</tr>\n<tr>\n<td align=\"center\">/contact-us.hbs</td>\n<td align=\"center\">/contact-us/index.html</td>\n<td align=\"center\">/contact-us/</td>\n</tr>\n<tr>\n<td align=\"center\">/about/index.pug</td>\n<td align=\"center\">/about/index.html</td>\n<td align=\"center\">/about/</td>\n</tr>\n<tr>\n<td align=\"center\">/portfolio/beautiful-site.ejs</td>\n<td align=\"center\">/portfolio/beautiful-site/index.html</td>\n<td align=\"center\">/portfolio/beautiful-site</td>\n</tr>\n</tbody></table>\n<p>In custom case when <code>uri</code> is provided system will follow it, adding <code>/index.html</code> at the end if is needed:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><code>uri</code> param</th>\n<th align=\"center\">Generated file</th>\n<th align=\"center\">Real usage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">index.html</td>\n<td align=\"center\">/index.html</td>\n<td align=\"center\">/</td>\n</tr>\n<tr>\n<td align=\"center\">about</td>\n<td align=\"center\">/about/index.html</td>\n<td align=\"center\">/about</td>\n</tr>\n<tr>\n<td align=\"center\">portfolio/awesome-site</td>\n<td align=\"center\">/portfolio/awesome-site/index.html</td>\n<td align=\"center\">/portfolio/awesome-site</td>\n</tr>\n</tbody></table>\n<p>In most cases you won&#39;t needed <code>uri</code> param at all.</p>\n<h2 id=\"per-page-scripts\">Per page scripts</h2>\n<p>All the pages share <code>app.js</code> entry script. But what if we need some other script to be on some page?</p>\n<p>User <code>js</code> array variable to add scripts relative to site <code>source</code> directory (default: <code>./src</code>).</p>\n<article class=\"message is-warning\">\n  <div class=\"message-body\"><b>Attention!</b> Usage of <code>js</code> meta-variable will rewrite it's default value (<code>app.js</code>). Don't forget to include <code>app.js</code> if you need it.</div>\n</article>\n\n<p>Example: <code>./pages/about.md</code></p>\n<pre><code class=\"language-bash\">---\ntitle: About\njs: [&quot;app.js&quot;,&quot;js/about.js&quot;]\n---\n# About page</code></pre>\n<p>Example: <code>./pages/js/about.js</code></p>\n<pre><code class=\"language-javascript\">console.log(&quot;This message is shown only in \\&quot;About\\&quot; page console.&quot;)\n// Or you can import even remote scripts\nimport(&#39;https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.js&#39;)\nimport(&#39;https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css&#39;)\n// Or node_modules\nimport Vue from &#39;vue&#39;\n// Or local scripts\nimport Lib from &#39;./lib.js&#39;\nimport &#39;./css/about.sass&#39;</code></pre>\n<h2 id=\"all-pages-in-json-file\">All pages in JSON-file</h2>\n<p>For usefull cases after the build has been done (and before <code>Webpack</code> starts) all the pages are store in <code>./src/pages.json</code> file.</p>\n<p>It can be import in any entry point and used, for example, in menu building or list output.</p>\n<p>Example: <code>./src/app.js</code></p>\n<pre><code class=\"language-javascript\">import pages from &quot;./pages.json&quot;\n\npages.forEach((page)=&gt;{\n  // Do something\n})</code></pre>\n<h1 id=\"layouts\">Layouts</h1>\n<p>After the <code>page</code> content is parsed with proper formatter, system starts up to look for the layout.</p>\n<p><code>Layout</code> can be a file of the same <a href=\"#formats-parsers-\">formats</a>.</p>\n<p>If <code>layout</code> is not defined in <code>page</code> metadata, it will be set to <code>index</code> by default.</p>\n<p>Example:</p>\n<pre><code class=\"language-bash\">---\ntitle: Index\n# no layout is provded here, so it&#39;ll be set to `index` by default\n---\n# Page contents</code></pre>\n<p>If <code>layout</code> is provided but has no extension, <code>.pug</code> will be used by default.</p>\n<p>Example:</p>\n<pre><code class=\"language-bash\">---\ntitle: Index\nlayout: index # .pug extension will be added by default\n---\n# Page contents</code></pre>\n<p>If <code>layout</code> is set to <code>false</code>, the <code>page</code> output will be written directly to the <code>output file</code> (<strong>without layout</strong>).</p>\n<p>Example:</p>\n<pre><code class=\"language-bash\">---\ntitle: Index\nlayout: false # layout is set to `false`, then page will be written directly to the output file\n---\n# Page contents</code></pre>\n<h2 id=\"layouts-resolver\">Layouts resolver</h2>\n<p>Layouts can be located at current theme <code>layouts</code> folder (default: <code>./themes/default/layouts</code>) or at current site <code>layouts</code> folder (example: <code>./src/layouts</code>).</p>\n<pre><code class=\"language-bash\">Search loop:\n1. Site layouts   # (ex.:`./src/layouts`)\n2. Theme layouts  # (ex.:`./themes/default/layouts`)</code></pre>\n<p>This way you can override theme layout with the current site layout.</p>\n<h2 id=\"page-content-in-layout\">Page content in layout</h2>\n<p>As it was said earlier, page metadata and it&#39;s content (as <code>content</code> field of data object) are provided to layout as variables.</p>\n<p>Let&#39;s look and <code>html5</code> template (which also served with <code>EJS</code> compiler to make <em>variables</em> be used):</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;head&gt;\n  &lt;title&gt;&lt;%= title%&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;%- output%&gt;\n&lt;/body&gt;</code></pre><p>Pay attention that <code>content</code> variable must be <strong>unescaped</strong> as it contains raw html data, parsed from page contents.</p>\n",
    "path": "docs/workflow/index.html",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/docs.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/docs/workflow/index.html"
  },
  "index.pug": {
    "title": "Cogear.JS â€“ modern static websites generator",
    "version": "1.0.0",
    "__content": "\nsection#s1\n\tspan\n\theader\n\t\t#logo.animated.zoomIn Cogear.JS\n\t\t.description: span\n\t\n\ta.action(href=\"/docs/\") Get Started &rarr;\n\t\t//- #version= 'v'+version\n\t.scroll-downs: .mousey: .scroller\nsection.block#s2\n\t.container\n\t\th2.centered(data-aos=\"fade-up\") How fast can you create a site?\t\n\t\t.centered\n\t\t\timg(src=\"~images/term.svg\" data-aos=\"flip-up\")\n\t\tp.lead.centered(data-aos=\"zoom-in\").\n\t\t\tIn less than a second. <br>\n\t\t\tAll you have left to do is to built and deploy it to the server.\n\t\t.spacer(data-aos=\"flip-left\")\n\t\th2.centered(data-aos=\"fade-up\") <span class=\"brand\">Cogear.JS</span> generated sites features:\n\t\t.features\n\t\t\t.feature(data-aos=\"fade-right\")\n\t\t\t\theader <i class=\"fas fa-rocket\"></i> Blazing fast\n\t\t\t\tp.\n\t\t\t\t\tServer handles pure html loads a way faster that any dynamic programming language.\n\t\t\t.feature(data-aos=\"fade-up\")\n\t\t\t\theader <i class=\"fas fa-piggy-bank\"></i> Extremly cheap\n\t\t\t\tp.\n\t\t\t\t\tWorks at any server. Any. <br>Even for free (at <a href=\"https://pages.github.com\">Github Pages</a>, <a href=\"https://heroku.com\">Heroku</a>, <a href=\"https://now.sh\">now.sh</a>, etc).\n\t\t\t.feature(data-aos=\"fade-left\")\n\t\t\t\theader <i class=\"fas fa-lock\"></i> Natively secured\n\t\t\t\tp.\n\t\t\t\t\tIt's impossible to hack pure html. Never needed to load updates like CMS do. Bulletproof protection for ever.\n\t\t\t.feature(data-aos=\"fade-right\")\n\t\t\t\theader <i class=\"fab fa-node-js\"></i> Modern workflow\n\t\t\t\tp.\n\t\t\t\t\tBased on <a href=\"https://webpack.js.org\">Webpack</a> you can use any npm package. Works with <a href=\"https://vuejs.org\">Vue.JS</a>, <a href=\"https://reactjs.org\">React</a>, <a href=\"https://angular.io\">Angular</a> and every modern frontend framework. \n\t\t\t.feature(data-aos=\"fade-up\")\n\t\t\t\theader <i class=\"fas fa-layer-group\"></i> Templates polyglot\n\t\t\t\tp.\n\t\t\t\t\tGenerates pages from <b>Markdown</b>, <b>Pug</b>, <b>EJS</b>, <b>Handlebars</b> or any other node-compiled markup language.\n\t\t\t.feature(data-aos=\"fade-left\")\n\t\t\t\theader <i class=\"fas fa-shipping-fast\"></i> Extremely performant\n\t\t\t\tp.\n\t\t\t\t\tGenerate hundreeds of pages for a few seconds. Easily can be used for blogging.\n\t\t\t.feature(data-aos=\"fade-right\")\n\t\t\t\theader <i class=\"fas fa-database\"></i> No database is required\n\t\t\t\tp.\n\t\t\t\t\tAll pages data neede for compilation is stored in the filesystem. Database will never fails. No errors on server after site is being deployed.\n\t\t\t.feature(data-aos=\"fade-up\")\n\t\t\t\theader <i class=\"fas fa-cube\"></i> Bundled assets\n\t\t\t\tp.\n\t\t\t\t\tAssets from different npm packages imported in your scripts are piped into <b>Webpack</b> workflow, minimized and optimized, and even compressed for the production.\n\t\t\t.feature(data-aos=\"fade-left\")\n\t\t\t\theader <i class=\"fas fa-cloud-upload-alt\"></i> Easily deployed\n\t\t\t\tp.\n\t\t\t\t\tCreate a preset and deploy your site to the favorite hosting with a touch of your fingers.\n\t\t.spacer(data-aos=\"flip-right\")\n\t\tp.lead.big.centered(data-aos=\"zoom-in\").\n\t\t\tJust try it. Install. Make a first site in a minutes.\n\t\t#install\n\t\t\ta.action(href=\"/docs#installation\" data-aos=\"flip-down\") How to install &rarr;",
    "filename": "index",
    "content": "<section id=\"s1\"><span></span><header><div class=\"animated zoomIn\" id=\"logo\">Cogear.JS</div><div class=\"description\"><span></span></div></header><a class=\"action\" href=\"/docs/\">Get Started &rarr;</a><div class=\"scroll-downs\"><div class=\"mousey\"><div class=\"scroller\"></div></div></div></section><section class=\"block\" id=\"s2\"><div class=\"container\"><h2 class=\"centered\" data-aos=\"fade-up\">How fast can you create a site?\t</h2><div class=\"centered\"><img src=\"~images/term.svg\" data-aos=\"flip-up\"/></div><p class=\"lead centered\" data-aos=\"zoom-in\">In less than a second. <br>\nAll you have left to do is to built and deploy it to the server.</p><div class=\"spacer\" data-aos=\"flip-left\"></div><h2 class=\"centered\" data-aos=\"fade-up\"><span class=\"brand\">Cogear.JS</span> generated sites features:</h2><div class=\"features\"><div class=\"feature\" data-aos=\"fade-right\"><header><i class=\"fas fa-rocket\"></i> Blazing fast</header><p>Server handles pure html loads a way faster that any dynamic programming language.</p></div><div class=\"feature\" data-aos=\"fade-up\"><header><i class=\"fas fa-piggy-bank\"></i> Extremly cheap</header><p>Works at any server. Any. <br>Even for free (at <a href=\"https://pages.github.com\">Github Pages</a>, <a href=\"https://heroku.com\">Heroku</a>, <a href=\"https://now.sh\">now.sh</a>, etc).</p></div><div class=\"feature\" data-aos=\"fade-left\"><header><i class=\"fas fa-lock\"></i> Natively secured</header><p>It's impossible to hack pure html. Never needed to load updates like CMS do. Bulletproof protection for ever.</p></div><div class=\"feature\" data-aos=\"fade-right\"><header><i class=\"fab fa-node-js\"></i> Modern workflow</header><p>Based on <a href=\"https://webpack.js.org\">Webpack</a> you can use any npm package. Works with <a href=\"https://vuejs.org\">Vue.JS</a>, <a href=\"https://reactjs.org\">React</a>, <a href=\"https://angular.io\">Angular</a> and every modern frontend framework. </p></div><div class=\"feature\" data-aos=\"fade-up\"><header><i class=\"fas fa-layer-group\"></i> Templates polyglot</header><p>Generates pages from <b>Markdown</b>, <b>Pug</b>, <b>EJS</b>, <b>Handlebars</b> or any other node-compiled markup language.</p></div><div class=\"feature\" data-aos=\"fade-left\"><header><i class=\"fas fa-shipping-fast\"></i> Extremely performant</header><p>Generate hundreeds of pages for a few seconds. Easily can be used for blogging.</p></div><div class=\"feature\" data-aos=\"fade-right\"><header><i class=\"fas fa-database\"></i> No database is required</header><p>All pages data neede for compilation is stored in the filesystem. Database will never fails. No errors on server after site is being deployed.</p></div><div class=\"feature\" data-aos=\"fade-up\"><header><i class=\"fas fa-cube\"></i> Bundled assets</header><p>Assets from different npm packages imported in your scripts are piped into <b>Webpack</b> workflow, minimized and optimized, and even compressed for the production.</p></div><div class=\"feature\" data-aos=\"fade-left\"><header><i class=\"fas fa-cloud-upload-alt\"></i> Easily deployed</header><p>Create a preset and deploy your site to the favorite hosting with a touch of your fingers.</p></div></div><div class=\"spacer\" data-aos=\"flip-right\"></div><p class=\"lead big centered\" data-aos=\"zoom-in\">Just try it. Install. Make a first site in a minutes.</p><div id=\"install\"><a class=\"action\" href=\"/docs#installation\" data-aos=\"flip-down\">How to install &rarr;</a></div></div></section>",
    "path": "index.html",
    "layout": "index.pug",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/index.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/index.html"
  },
  "info.html": {
    "title": "COOOL",
    "__content": "\n<h1>Info</h1>",
    "filename": "info",
    "content": "\n<h1>Info</h1>",
    "path": "info/index.html",
    "layout": "index.pug",
    "layoutPath": "/Users/dima/Sites/cogearjs.org/src/layouts/index.pug",
    "buildPath": "/Users/dima/Sites/cogearjs.org/.build/info/index.html"
  }
}